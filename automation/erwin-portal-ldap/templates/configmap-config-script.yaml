apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint-script
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "openldap.name" . }}
    chart: {{ template "openldap.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 4 }}
{{- end }}
data:
  01.sh: |
    #!/bin/sh
    set -e
    # found no way to check if ldap server is running with a while statement
    sleep 5
    # it is important that the modify.ldif runs first, otherwise it fails since the ACLS have to get adjusted first 
    ldapmodify -Y EXTERNAL -H ldapi:/// -f /ldap-configuration/modify/modify.ldif
    # no sure why this sleep is needed again - but it is
    sleep 10

    # Loading Schemas
    ucsmail_search_output=$(ldapsearch -Y EXTERNAL -H ldapi:/// -b "cn=schema,cn=config" "(cn=*ucsMail)")
    if (echo "$ucsmail_search_output" | grep -q "numEntries: 1"); then
      echo "Entry for ucsMail Schema already exists. If you need to modify it, delete it and readd it."
    else
      ldapadd -Y EXTERNAL -H ldapi:/// -f /opt/bitnami/openldap/etc/schema/00-ucsmail.ldif
    fi

    # Adding Config Users from Secret
    /bin/bash /script/02.sh /ldap-configuration/apply/apply.ldif true
    # Adding other Configs from Configmap
    /bin/bash /script/02.sh /ldap-configuration/extra/apply.ldif false
    /bin/bash /script/02.sh /ldap-configuration/extra/modify.ldif true

    


  # this script is needed so that Helm Chart is stable if persistence is enabled
  # it applies changes if they are new, but modifies them if they already exist
  02.sh: |  
    LDIF_FILE="$1"
    OVERWRITE="${2:-false}"

    process_entry() {
      local entry_dn="$1"
      local entry_ldif="$2"

      # Check if entry exists
      ldapsearch -Y EXTERNAL -H ldapi:/// -b "$entry_dn" -s base -LLL dn > /dev/null 2>&1

      if [ $? -eq 0 ]; then
        if [ "$OVERWRITE" = true ]; then
          echo "Entry already exists: $entry_dn, updating entry by running ldapmodify"
          echo "$entry_ldif" | sed 's/^dn: .*/changetype: modify/' | ldapmodify -Y EXTERNAL -H ldapi:/// 
        else
          echo "Entry already exists: $entry_dn, skipping ldapmodify"
        fi
      else
        echo "Entry does not exist, adding entry: $entry_dn"
        echo "$entry_ldif" | ldapadd -Y EXTERNAL -H ldapi:/// 
      fi
    }

    # Read the LDIF file and process each entry
    current_dn=""
    current_entry=""

    # Read the LDIF file line by line
    while IFS= read -r line || [[ -n "$line" ]]; do
        # Check for dn line to identify new entry
        if echo "$line" | grep -q "^dn:"; then
            # If current_dn is set, process the previous entry
            if [ -n "$current_dn" ]; then
                process_entry "$current_dn" "$current_entry"
            fi
            # Start a new entry
            current_dn=$(echo "$line" | cut -d' ' -f2-)
            current_entry="$line"
        else
            # Accumulate the current entry
            current_entry="$current_entry"$'\n'"$line"
        fi
    done < "$LDIF_FILE"

    # Process the last entry in the file
    if [[ -n "$current_dn" ]]; then
      process_entry "$current_dn" "$current_entry"
    fi
