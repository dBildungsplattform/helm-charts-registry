global:
  imageRegistry: ""
  #imagePullSecrets: [""]
  ## ldapDomain , can be explicit (e.g dc=example,c=com) or domain based (e.g example.com)
  ldapDomain: "schule-sh.de"                  # translates to LDAP_ROOT
  # Specifies an existing secret to be used for admin and config user passwords. The expected key are LDAP_ADMIN_PASSWORD and LDAP_CONFIG_ADMIN_PASSWORD.
  existingSecret: ""
  # If you do not set the credentials via this secret but via the ENV the Helm Chart will fail (permission issue)
  adminUser: "admin"                          # LDAP_ADMIN_USERNAME
  # adminPassword: ""                         # LDAP_CONFIG_ADMIN_PASSWORD
  configUserEnabled: true                     # LDAP_CONFIG_ADMIN_ENABLED (default: no)
  configUser: "config"                        # LDAP_CONFIG_ADMIN_USERNAME
  # configPassword: ""                        # LDAP_CONFIG_ADMIN_USERNAME
  ldapPort: 389                               # LDAP_PORT_NUMBER
  sslLdapPort: 636                            # LDAP_LDAPS_PORT_NUMBER

nameOverride: ""
fullnameOverride: ""


# this is not so clean -can this get deleted? 
# used extra secret var since you can not reference the global one
existingSecret:
  enabled: true
  name: dbildungs-iam-ldap

image:
  repository: bitnami/openldap
  tag: 2.6.6
  pullPolicy: Always
  pullSecrets: []

extraLabels: {}

service:
  annotations: {}
  ## If service type NodePort, define the value here
  # ldapPortNodePort:
  # sslLdapPortNodePort:

  enableLdapPort: true
  enableSslLdapPort: true

  sessionAffinity: None
  type: ClusterIP 
  # type: LoadBalancer
  externalIp: false
  # if enabled you need to have to set the LOADBALANCER_IP key with value in the existingSecret
  # externalIp: true
  SourceRangesRestriction: false
  # if enabled you need to have to set the LOADBALANCER_SOURCERANGES key with value in the existingSecret
  # servicecenter f√ºr den prometheus blackbox exporter freischalten
  # SourceRangesRestriction: true
  # enableLdapPort: false

# enable this service block and disable the service one above, to make LDAP outside the cluster available 	
# Note that only one namespace at a time can use this feature!!	
# service:	
#   enableLdapPort: true
#   enableSslLdapPort: true	
#   type: LoadBalancer	
#   externalIp: true	
#   SourceRangesRestriction: false


# Use the env variables from https://hub.docker.com/r/bitnami/openldap/
env:
  BITNAMI_DEBUG: "true"
  LDAP_LOGLEVEL: "256"
  # LDAP_LOGLEVEL: "16384"

  # Configuration
  LDAP_SKIP_DEFAULT_TREE: "yes"
  LDAP_ULIMIT_NOFILES: "1024" # staging and prod: 4096
  # if something is not needed it can get removed by just not mentioning it here # order is importand, do not put nis in front, always append it
  # is this is enabled replication is not working
  # LDAP_EXTRA_SCHEMAS: cosine,inetorgperson,nis

  # Security
  LDAP_ENABLE_TLS: "yes" 
  # LDAP_ENABLE_TLS: "no" # disable it for testing with phpldapadmin
  # LDAP_REQUIRE_TLS: "yes" # not sure whether this is necessary, it breaks stuff
  LDAPTLS_REQCERT: "never"
  LDAP_TLS_ENFORCE: "false"
  LDAP_ALLOW_ANON_BINDING: "no" 

  # Accesslog
  LDAP_ENABLE_ACCESSLOG: "yes" 
  LDAP_ACCESSLOG_LOGPURGE: "30+00:00 30+00:00" # min and max value

pdb:
  enabled: false
  minAvailable: 1
  maxUnavailable: ""

# Custom openldap schema files used to be used in addition to default schemas
# Note that the supplied files are sorted by name and inserted into 'LDAP_EXTRA_SCHEMAS' env var
# after chart default schemas, allowing you to control the loading sequence.
customSchemaFiles:
  00-ucsmail.ldif: |-
    dn: cn=ucsMail,cn=schema,cn=config
    objectClass: olcSchemaConfig
    cn: ucsMail
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.1 NAME 'mailPrimaryAddress' DESC 'Primary mailaddresses for the user' EQUALITY caseIgnoreIA5Match SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.2 NAME 'mailAlternativeAddress' DESC 'Secondary (alias) mailaddresses for the same user' EQUALITY caseIgnoreIA5Match SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.3 NAME 'mailGlobalSpamFolder'DESC 'Move Spam to global spam folder instead of local spam folder' EQUALITY caseIgnoreIA5Match SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.47 NAME 'mailForwardAddress'DESC 'External mail addresses to forward the users emails to' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.51 NAME 'mailForwardCopyToSelf' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{10} SINGLE-VALUE )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.60 NAME 'univentionMailHomeServer' DESC 'home server of users mailbox' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} SINGLE-VALUE )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.92 NAME 'univentionMailUserQuota' DESC 'Mailbox hard quota limit in MB' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
    olcObjectClasses: ( 1.3.6.1.4.1.10176.1010.2.1 NAME 'univentionMail' DESC 'Univention Mail Preferences' SUP top AUXILIARY MUST uid MAY ( univentionMailHomeServer $ mailPrimaryAddress $ mailAlternativeAddress $ mailGlobalSpamFolder $ univentionMailUserQuota $ mailForwardAddress $ mailForwardCopyToSelf ) )
#   anothercustom.ldif: |-
#     # another custom schema
#     # adjust the configuration script configmap-config-script to make sure schema is always loaded 


# Custom openldap configuration files used to override default settings
# can not get loaded if TLS is required ldap_bind: Confidentiality required (13) additional info: TLS confidentiality required
# DO NOT FORGET to put the Root Organisation object as it won't be created while using customLdifFiles
# Files that change the general config or create ACL are not allowed here, insufficient permissions, they get hendled via the dbildungs-iam-ldap-configuration secret
# Only considered once in the initial setup
customLdifFiles:
  00-root.ldif: |-
    dn: dc=schule-sh,dc=de
    dc: schule-sh
    objectClass: dcObject
    objectClass: organization
    o: SPSH


# First the apply.ldif gets applied if entry is not existend, then the entries in modify.ldif overwrite the entries
customExtraLdifFiles: 
  apply.ldif: |-
    dn: cn=lehrer,dc=schule-sh,dc=de
    cn: lehrer
    objectclass: groupOfUniqueNames
    objectclass: top
    uniquemember:

    dn: cn=schueler,dc=schule-sh,dc=de
    cn: schueler
    objectclass: groupOfUniqueNames
    objectclass: top
    uniquemember:

    dn: ou=oeffentlicheSchulen,dc=schule-sh,dc=de
    objectclass: organizationalUnit
    objectclass: top
    ou: oeffentlicheSchulen

    dn: ou=ersatzSchulen,dc=schule-sh,dc=de
    objectclass: organizationalUnit
    objectclass: top
    ou: ersatzSchulen

    dn: cn=mmusterschueler,ou=oeffentlicheSchulen,dc=schule-sh,dc=de
    uid: mmusterschueler
    cn: mmusterschueler
    givenname: Moritz
    objectclass: inetOrgPerson
    objectclass: univentionMail
    mailPrimaryAddress: moritz.muster-schueler@schule-sh.de
    mailAlternativeAddress: moritz.muster-schueler@schule-sh.de
    objectclass: top
    sn: Muster-Schueler

    dn: cn=ssuperadmin,ou=oeffentlicheSchulen,dc=schule-sh,dc=de
    uid: ssuperadmin
    cn: ssuperadmin
    givenname: Susi
    objectclass: inetOrgPerson
    objectclass: univentionMail
    mailPrimaryAddress: susi.superadmin@schule-sh.de
    mailAlternativeAddress: susi.superadmin@schule-sh.de
    objectclass: top
    sn: Superadmin

  modify.ldif: |-
    # Group members
    dn: cn=lehrer,dc=schule-sh,dc=de
    cn: lehrer
    objectclass: groupOfUniqueNames
    objectclass: top
    uniquemember: cn=ssuperadmin,ou=oeffentlicheSchulen,dc=schule-sh,dc=de

    dn: cn=schueler,dc=schule-sh,dc=de
    cn: schueler
    objectclass: groupOfUniqueNames
    objectclass: top
    uniquemember: cn=mmusterschueler,ou=oeffentlicheSchulen,dc=schule-sh,dc=de

replicaCount: 1

# will have to work on this
replication:
  enabled: false
  clusterName: "cluster.local"
  retry: 60
  timeout: 1
  interval: 00:00:00:10
  starttls: "critical"
  tls_reqcert: "never"

persistence:
  enabled: false
  # existingClaim: openldap-pvc
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  storageClass: ""

resources:
  limits:
    cpu: 2
    memory: 4G
  requests:
    cpu: 100m
    memory: 100Mi

# enabling other features makes it so that ldap container fails with not enough permissions
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  # capabilities:
  #   drop: ["ALL"]
  # seccompProfile:
  #   type: "RuntimeDefault"

podSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

existingConfigmap:
command: []
args: []
hostAliases: []
podLabels: {}
podAnnotations: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
updateStrategy:
  type: RollingUpdate

priorityClassName: ""
schedulerName: ""

extraEnvVars: []
extraEnvVarsCM:
extraEnvVarsSecret:
extraVolumes: []
extraVolumeMounts: []

serviceAccount:
  create: false
  name: ""
  automountServiceAccountToken: false
  annotations: {}  

kubeVersion: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []

metrics:
  enabled: true
  replicaCount: 1
  image:
    # we should create an own forked repo and publish the image 
    repository: ollijanatuinen/openldap-exporter
    tag: v2.0
    pullPolicy: IfNotPresent
  ports:
    - name: metrics
      containerPort: 9330
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 64Mi

  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    ports:
      - name: metrics
        port: 9330

  ## Prometheus Operator ServiceMonitor configuration
  serviceMonitor:
    enabled: true
    endpoints:
      - port: "metrics"
        path: /metrics

## Init Container Parameters
initSchema:
  image: 
    repository: debian
    tag: latest
    pullPolicy: Always
    pullSecrets: []

## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'echo "hello world"']
##

## 'initTlsSecret' init container parameters
##  need a secret with tls.crt, tls.key 
initTLSSecret:
  # adminldap, per default disabled only works with tls_enabled
  tls_enabled: false
  # tls_enabled: true # needs to get enabled if you want to make the service available to the outside 
  # Note that only one namespace at a time can use this feature and that you need to copy a tls secret into the namespace, see Confluence for more information
  image:
    registry: docker.io
    repository: alpine/openssl
    tag: latest
    pullPolicy: IfNotPresent
  secret: "" 
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 100Mi

volumePermissions:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10
    pullPolicy: IfNotPresent
    command: [ 'sh', '-c', 'chmod -R g+rwX /bitnami' ]
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi

sidecars: {}

lifecycleHooks: 
  postStart:
    exec:
      command: ["sh", "-c", "/script/01.sh"]

livenessProbe:
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 10
readinessProbe:
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 10
startupProbe:
  enabled: true
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 30
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}

## phpldapadmin
## For more parameters check following file: ./charts/phpldapadmin/values.yaml
# if you want to use phpldapadmin for debugging set:
# initTLSSecret:
   # tls_enabled: false 
# env: 
   # LDAP_ENABLE_TLS: "no" 
phpldapadmin:
  enabled: false
  image:
    tag: 0.9.0
  env:
    PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT: "never"
  ingress:
    enabled: true
    annotations: {}
    # ingressClassName: nginx
    path: /
    pathType: Prefix
    hosts:
    - phpldapadmin.example
    tls: []
    # - secretName: phpldapadmin.example
    #   hosts:
    #   - phpldapadmin.example
