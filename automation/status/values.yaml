
replicaCount: 1

image:
  # -- Image to use for deploying
  repository: ghcr.io/dbildungsplattform/cachet
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
# -- The annotations to be applied to instances of the status-service pod
podAnnotations: {}
# -- Settings for security context of the pod
podSecurityContext: {}
  # fsGroup: 2000
# -- Settings for security context of the container
runAsUser: 1001
service:
  # -- Kubernetes Service type
  type: ClusterIP
  # -- Status service port
  port: 80

ingress:
  # -- Enable ingress controller resource
  enabled: false
  # -- Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations. 
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- The list of hostnames to be covered with this ingress record.
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  # -- Enable TLS configuration for the hostnames defined at ingress.hosts parameter
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # -- The resources limits for the container
  limits:
    cpu: 1000m
    memory: 1Gi
  # -- The requested resources for the container
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  # -- Enable autoscaling for status service
  enabled: false
  # -- Minimal number of replicas for status service
  minReplicas: 1
  # -- Maximum number of replicas for status service
  maxReplicas: 3
  # -- Target CPU utilization for horizontal pod autoscaler
  targetCPUUtilizationPercentage: 80
# -- Postgresql settings. See https://github.com/bitnami/charts/tree/master/bitnami/postgresql fro details
postgresql:
  enabled: true
  auth:
    username: "status"
    postgresPassword: "status"
    password: "status"
    database: "status"
    existingSecret: ""
    secretKeys:
      adminPasswordKey: ""
      userPasswordKey: ""
  service:
    ports:
      postgresql: 5432
  primary:
    persistence:
      enabled: true
      size: 10Gi

# -- Redis settings. See https://github.com/bitnami/charts/tree/master/bitnami/redis fro details
redis:
  enabled: true
  architecture: standalone

env:
  # -- Default settings for cachet / status-service. See https://docs.cachethq.io/docs/installing-cachet for more information
  public:
    # Application environments
    APP_NAME: "statuspage"
    APP_ENV: "production"
    APP_TIMEZONE: "UTC"
    CACHET_INTERNET_LOOKUPS: "false"
    APP_DEBUG: false
    APP_LOG: errorlog
    DB_DRIVER: pgsql
    DOCKER: true
    CACHE_DRIVER: redis
    SESSION_DRIVER: redis
    QUEUE_DRIVER: redis
    CACHET_EMOJI: false
    CACHET_BEACON: false
    # Email configuration: https://docs.cachethq.io/docs/configuring-mail
    MAIL_DRIVER: log
    MAIL_HOST: ""
    MAIL_ADDRESS: ""
    MAIL_PORT: 25
    MAIL_NAME: ""
    MAIL_ENCRYPTION: tls

  # -- Private environment variables which are stores in a kubernetes secret
  private:
     # env.private.APP_KEY --App key for Cachet. Generate with echo "base64:$(openssl rand -base64 32)"
# -- Use existing secret for Cachet settings
existingSecret: ""

test:
  enabled: true

extraLabels: {}

nodeSelector: {}

tolerations: []

affinity: {}

seedData: {}
#trigger
