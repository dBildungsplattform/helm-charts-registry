global:
  kubectl_version: "1.28.7"
  # -- Default storage class, should support ReadWriteMany
  storageClass: "nfs-client"
  # -- All plugins are disabled by default. if enabled, the plugin is installed on image startup
  moodlePlugins:
    kaltura:
      enabled: false
    etherpadlite:
      enabled: false
    hvp:
      enabled: false
    groupselect:
      enabled: false
    jitsi:
      enabled: false
    pdfannotator:
      enabled: false
    tiles:
      enabled: false
    skype:
      enabled: false
    zoom:
      enabled: false
    booking:
      enabled: false
    reengagement:
      enabled: false
    unilabel:
      enabled: false
    geogebra:
      enabled: false
    choicegroup:
      enabled: false
    staticpage:
      enabled: false
    heartbeat:
      enabled: false
    remuiformat:
      enabled: false
    topcoll:
      enabled: false
    oidc:
      enabled: false
    saml2:
      enabled: false
    dash:
      enabled: false
    sharing_cart:
      enabled: false
    xp:
      enabled: false
    certificate:
      enabled: false
    coursecertificate:
      enabled: false
    adaptable:
      enabled: false
    boost_union:
      enabled: false
    boost_magnific:
      enabled: false
    snap:
      enabled: false
    flexsections:
      enabled: false
    multitopic:
      enabled: false

dbpMoodle:
  name: infra
  stage: infra

  # -- disallows all egress from release namespace for the moodle deployment
  allowInternalNetworkingOnly: false

  phpConfig:
    # -- Extended php logging
    extendedLogging: false
    # -- Moodle debugging is not safe for production
    debug: false
    # -- Prevents the installation of Plugins from the Moodle Web Interface for Admins (Disabled by default)
    pluginUIInstallation:
      enabled: false
    # -- Any additional text to be included into the config.php
    additional: ""
    # -- Provide an existing secret containing the config.php instead of generating it from chart
    # -- Remember to adjust moodle.extraVolumes & moodle.extraVolumeMounts when setting this.
    # -- Secret key is by default expected to be config.php
    existingConfig: ""

  # -- Configurations for the optional redis
  redis:
    host: "moodle-redis-master"
    port: 6379
    password: ""

  external_pvc:
    enabled: true
    name: "moodle-data"
    size: "8Gi"
    storage_class: "nfs-client"
    accessModes: ["ReadWriteMany"]
    annotations:
      "helm.sh/resource-policy": "keep"

  # -- Creates a secret with all relevant credentials for moodle
  # -- Set useChartSecret: false to provide your own secret
  # -- If you create your own secret, also set moodle.existingSecret (and moodle.externalDatabase.existingSecret if you bring your own DB)
  secrets:
    useChartSecret: true
    moodle_password: ""
    database_password: ""
    database_root_password: ""
    etherpad_postgresql_password: ""
    etherpad_api_key: ""

  # -- A preperation job which disables the php-cronjob, scales down the deployment and creates a backup if dbpMoodle.backup.enabled=true
  moodleUpdatePreparationJob:
    enabled: false
    affinity: {}
    tolerations: []
    resources: {}
    # -- Which kubectl image to use
    repository: "ghcr.io/dbildungsplattform"
    image: moodle-tools
    tag: "1.0.8"

  moodleUpdatePreparationHook:
    rules:
      - apiGroups: ["apps"]
        resources: ["deployments"]
        verbs: ["get", "patch"]
      - apiGroups: ["batch"]
        resources: ["cronjobs", "jobs"]
        verbs: ["get", "list", "create", "patch", "watch"]

  # -- Backup configuration. Set enabled=true to enable the backup-cronjob. Also set s3 location credentials
  backup:
    enabled: false
    # -- Defines the maximum age of a backup before it is deleted
    retention_time: "6M"
    # -- Defines the maximum age of a full backup before a new full backup is created. The backups in between are incremental
    max_full_backup_age: "1W"
    gpg_key_names: ""
    gpgkeys:
      gpgkey.dbpinfra.pub.asc: ""
      gpgkey.dbpinfra.sec.asc: ""
      # -- Existing  secret for gpg keys
      existingSecret: ""
    s3_bucket_name: ""
    cluster_name: ""
    endpoint: ""
    # -- Either provide an existing secret, or set each secret value here. If both are set the existingSecret is used
    secrets:
      s3_access_key: ""
      s3_access_secret: ""
      s3_endpoint_url: ""
      # -- Existing secret for s3 endpoint
      existingSecret: ""
    # -- Secret key of a certificate for duply to connect to s3 endpoint using SSL, useful to trust self-signed certificates
    # -- certificate has to mounted "manually" under values backup-cronjob
    s3_certificate_secret:
      enabled: false
      name: "s3-certificate"
      # -- Path where the certificate is mounted
      key: "certificate.crt"
      mountpath: "/certs"
    rules:
      - apiGroups: ["apps"]
        resources: ["deployments"]
        verbs: ["get", "patch", "list", watch]
      - apiGroups: ["batch"]
        resources: ["cronjobs", "jobs"]
        verbs: ["get", "patch"]

  # -- This restores moodle to the latest snapshot. Requires an existing s3 backup. ONLY USE FOR ROLLBACK
  restore:
    enabled: false
    repository: ghcr.io/dbildungsplattform
    image: moodle-tools
    tag: 1.0.8
    resources:
      limits:
        cpu: 2000m
        memory: 16Gi
      requests:
        cpu: 1000m
        memory: 8Gi
    existingSecretGPG: ""
    existingSecretDatabaseConfig: "moodle-database"
    existingSecretDatabasePassword: "moodle"
    existingSecretKeyDatabasePassword: ""
    existingSecretS3: ""
    existingSecretKeyS3Access: ""
    existingSecretKeyS3Secret: ""
    affinity: {}
    tolerations: []

    rules:
      - apiGroups: ["apps"]
        resources: ["deployments/scale", "deployments"]
        verbs: ["get", "list", "scale", "patch"]

  # -- Configuration for the moodle-cronjob which runs moodles cron.php. This is required since moodle does not run as root
  moodlecronjob:
    wait_timeout: "15m"
    rules:
      - apiGroups: [""]
        resources: ["pods", "pods/exec"]
        verbs: ["get", "list", "create", "watch"]

  # -- Horizontal pod autoscaling values
  hpa:
    enabled: false
    deployment_name_ref: "moodle"
    min_replicas: 1
    max_replicas: 4
    average_cpu_utilization: 50
    # -- The max amount in percent to scale down in one step per cooldown period
    scaledown_value: 25
    # -- How many seconds to wait between downscaling adjustments
    scaledown_cooldown: 60
    # -- The max amount in percent to scale up in one step per cooldown period
    scaleup_value: 50
    # -- How many seconds to wait between upscaling adjustments
    scaleup_cooldown: 15

moodle:
  updateStrategy:
    type: RollingUpdate
  image:
    registry: ghcr.io
    repository: dbildungsplattform/moodle
    # -- The dbp-moodle image which is build for this helm chart
    tag: "4.1.14-debian-12-r4-dbp5"
    pullPolicy: Always
    # -- Debug mode for more detailed moodle installation and log output
    debug: false
  moodleSkipInstall: false
  moodleSiteName: "Moodle"
  moodleLang: "de"
  moodleUsername: admin
  moodleEmail: ""
  allowEmptyPassword: false
  extraEnvVars:
    - name: PHP_POST_MAX_SIZE
      value: "200M"
    - name: PHP_UPLOAD_MAX_FILESIZE
      value: "200M"
    - name: PHP_MAX_INPUT_VARS
      value: "5000"
    - name: MOODLE_PLUGINS
      valueFrom:
        configMapKeyRef:
          name: moodle-plugins
          key: moodle-plugin-list
  extraEnvVarsSecret: ""
  # --	If this value is unset, the bitnami/moodle chart generates its own secret
  existingSecret: "moodle"
  persistence:
    # -- If this value is unset, the bitnami/moodle chart generates its own PV & PVC
    existingClaim: "moodle-data"
  affinity: {}
  tolerations: []
  readinessProbe:
    path: /login/index.php?noredirect=1
  resources:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      cpu: 6
      memory: 3Gi
  # -- The mariadb included in bitnami/moodle chart. For this chart usage of mariadb.enabled with moodle.externalDatabase.type="mariadb" is recommended
  mariadb:
    enabled: false
    database: bitnami_moodle
    username: bn_moodle
  externalDatabase:
    # -- Type of DB to provision, possible values are "mariadb" and "pgsql"
    type: "mariadb"
    # -- Host of the existing database
    host: "moodle-mariadb"
    # -- Port of the existing database
    port: 3306
    # -- Existing username in the external db
    user: "moodle"
    # -- Password for the above username
    password: ""
    # -- Name of the existing database
    database: "moodle"
    # -- Name of an existing secret resource containing the DB password
    existingSecret: "moodle"
  service:
    type: ClusterIP
  ingress:
    enabled: true
    # -- The hostname of the moodle application
    hostname: "example.de"
    # -- Any additional hostnames, needs to be "name: URL" value pairs
    extraHosts: []
    tls: true
    annotations:
      cert-manager.io/cluster-issuer: sc-cert-manager-clusterissuer-letsencrypt
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "30s"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "20s"
      nginx.ingress.kubernetes.io/proxy-body-size: "200M"
  metrics:
    enabled: true
    service:
      type: ClusterIP
    # -- Resources have to be set so that the horizontal pod autoscaler for moodle can read the moodle cpu consumption correctly
    resources: 
      requests:
        cpu: 10m
        memory: 16Mi
      limits:
        cpu: 200m
        memory: 256Mi
  extraVolumeMounts:
    - name: moodle-php-ini
      readOnly: true
      mountPath: /moodleconfig/php-ini
    - name: moodle-php-config
      readOnly: true
      mountPath: /moodleconfig/config-php
  extraVolumes:
    # -- The php.ini which installs the php-redis extension to enable the use for redis
    - name: moodle-php-ini
      configMap:
        name: moodle-php-ini
        items:
          - key: php.ini
            path: php.ini
        defaultMode: 0644
    # -- The custom config.php file that is used to configure moodle to use the database and redis (if activated)
    - name: moodle-php-config
      secret:
        secretName: moodle-php-config
        items:
          - key: config.php
            path: config.php
        defaultMode: 0644
  podAnnotations:
    moodle/image: '{{- .Values.image.repository -}}:{{- .Values.image.tag -}}'
    moodleplugins/checksum: '{{- include "dbpMoodle.pluginConfigMap.content" . | sha256sum -}}'
  containerSecurityContext:
    enabled: true
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
  podSecurityContext:
    enabled: true
  containerPorts:
    http: 8080
    https: 8443
  networkPolicy:
    enabled: false

mariadb:
  enabled: true
  global:
    storageClass: "nfs-client"
  image:
    tag: "11.3.2-debian-12-r5"
  auth:
    username: "moodle"
    database: "moodle"
    existingSecret: "moodle"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  primary:
    containerSecurityContext:
      privileged: false
    affinity: {}
    tolerations: []
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 9
        memory: 3Gi

postgresql:
  enabled: false
  image:
    tag: "14.8.0-debian-11-r0"
  auth:
    username: "moodle"
    database: "moodle"
    existingSecret: "moodle"
    secretKeys:
      adminPasswordKey: "pgsql-admin-password"
      # -- Moodle expects its db password key to be mariadb-password
      userPasswordKey: "mariadb-password"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  primary:
    extendedConfiguration: |
      max_connections = 800
    containerSecurityContext:
      privileged: false
    affinity: {}
    tolerations: []
    resources:
      requests:
        cpu: "250m"
        memory: "256Mi"
      limits:
        cpu: 9
        memory: "3Gi"

# redis helm chart values
redis:
  enabled: false
  architecture: "standalone"
  auth:
    enabled: true
    existingSecret: "moodle"
    existingSecretPasswordKey: "redis-password"
    usePasswordFileFromSecret: true
  master:
    affinity: {}
    tolerations: []
    resources: {}

etherpadlite:
  enabled: false
  image:
    repository: "ghcr.io/dbildungsplattform/etherpad"
    tag: "1.8.18.0"
  env:
    - name: DB_TYPE
      value: "postgres"
    - name: DB_HOST
      value: "moodle-etherpad-postgresql"
    - name: DB_PORT
      value: "5432"
    - name: DB_NAME
      value: "etherpad"
    - name: DB_USER
      value: "etherpad"
    - name: DB_PASS
      valueFrom:
        secretKeyRef:
          name: "moodle"
          key: "etherpad-postgresql-password"
    - name: REQUIRE_SESSION
      value: "true"
  volumes:
    - name: "api-key"
      secret:
        secretName: "moodle"
        items:
          - key: "etherpad-api-key"
            path: "APIKEY.txt"
  volumeMounts:
    - name: "api-key"
      mountPath: "/opt/etherpad-lite/APIKEY.txt"
      subPath: "APIKEY.txt"
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "sc-cert-manager-clusterissuer-letsencrypt"
    hosts:
      - host: "etherpad.example.de"
        paths:
          - path: "/"
            pathType: "Prefix"
    tls:
      - secretName: "etherpad.example.de-tls"
        hosts:
          - "etherpad.example.de"
  securityContext:
    privileged: false
  affinity: {}
  tolerations: []
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

etherpad-postgresql:
  enabled: false
  auth:
    enablePostgresUser: false
    username: etherpad
    database: "etherpad"
    existingSecret: "moodle"
    secretKeys:
      userPasswordKey: "etherpad-postgresql-password"
  persistence:
    existingClaim: "moodle-etherpad-postgresql"
  primary:
    containerSecurityContext:
      privileged: false
    affinity: {}
    tolerations: []
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"

moodlecronjob:
  image:
    repository: "ghcr.io/dbildungsplattform/moodle-tools"
    tag: "1.0.8"
  clusterRole:
    create: false
  serviceAccount:
    name: "moodle-cronjob"
    create: false
  podSecurityContext:
    fsGroup: 1001
  securityContext:
    privileged: false
    allowPrivilegeEscalation: false
    runAsGroup: 1001
    runAsUser: 1001
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
  affinity: {}
  tolerations: []
  resources: {}
  jobs:
    - name: php-script
      schedule: "* * * * *"
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 1
      successfulJobsHistoryLimit: 1
      backoffLimit: 1
      restartPolicy: Never
      command:
        - /bin/bash
        - -c
      args:
        - /scripts/cronjob-script
      extraVolumeMounts:
        - name: moodle-php-script
          mountPath: /scripts/
      extraVolumes:
        - name: moodle-php-script
          configMap:
            name: moodle-php-script
            defaultMode: 0554
      livenessProbe:
        exec:
          command:
            - cat
            - /tmp/healthy
        initialDelaySeconds: 2
        periodSeconds: 2

backup-cronjob:
  image:
    repository: "ghcr.io/dbildungsplattform/moodle-tools"
    tag: "1.0.8"
  clusterRole:
    create: false
  serviceAccount:
    name: "moodle-backup-job"
    create: false
  env:
    - name: DATABASE_HOST
      valueFrom: 
        secretKeyRef:
          name: moodle-database
          key: host
    - name: DATABASE_PORT
      valueFrom: 
        secretKeyRef:
          name: moodle-database
          key: port
    - name: DATABASE_NAME
      valueFrom:
        secretKeyRef:
          name: moodle-database
          key: name
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: moodle-database
          key: user
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: moodle
          key: mariadb-password
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: moodle-backup-s3
          key: s3_access_key
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: moodle-backup-s3
          key: s3_access_secret
    - name: S3_BACKUP_REGION_URL
      valueFrom:
        secretKeyRef:
          name: moodle-backup-s3
          key: s3_endpoint_url
  extraVolumeMounts:
    - name: moodle-backup-script
      mountPath: /scripts/
    - name: moodle-pvc-data
      mountPath: /mountData
    - name: duply
      mountPath: /etc/duply/default/
  extraVolumes:
    - name: moodle-pvc-data
      persistentVolumeClaim:
        claimName: "moodle-data"
    - name: moodle-backup-script
      configMap:
        name: moodle-backup-script
        defaultMode: 0711
    - name: duply
      projected:
        sources:
          - configMap:
              name: moodle-backup-duply
              items:
                - key: conf
                  path: conf
                - key: exclude
                  path: exclude
          - secret:
              name: moodle-backup-gpg-keys
        defaultMode: 0644
  securityContext:
    privileged: false
    allowPrivilegeEscalation: false
    runAsGroup: 1001
    capabilities:
      drop:
        - ALL
  affinity: {}
  tolerations: []
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi
  jobs:
    - name: backup
      schedule: "0 3 * * *"
      failedJobsHistoryLimit: 1
      successfulJobsHistoryLimit: 1
      command:
        - /bin/sh
        - -c
      args:
        - /scripts/backup-script
      livenessProbe:
        exec:
          command:
            - cat
            - /tmp/healthy
        initialDelaySeconds: 5
        periodSeconds: 10

sql-exporter:
  enabled: false
  image:
    pullPolicy: "IfNotPresent"
  securityContext:
    privileged: false
    allowPrivilegeEscalation: false
  affinity: {}
  tolerations: []
  resources: {}
  extraVolumes:
    - name: moodle-collector-config
      volume:
        configMap:
          name: moodle-sql-exporter-configmap
          items:
            - key: moodle-collector-config
              path: sql_exporter_moodle.yaml
      mount:
        readOnly: true
        mountPath: /etc/sql_exporter/collectors/
  config:
    collector_files: ["collectors/sql_exporter_moodle.yaml"]
    target:
      data_source_name: ""
      collectors: [sql_exporter_moodle]