nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

replicaCount: 1
image:
  repository: "ghcr.io/dbildungsplattform/dbp-keycloak-generic"
  tag: "latest"
  pullPolicy: "Always"
  pullSecrets: []

auth:
  # existingSecret: Refers to a secret already present in the cluster, which is required for the authentication and configuration of the database setup tasks.
  existingSecret: ""
  secretName: "dbp-keycloak"

  admin_password: ""
  keycloak_rs256_privateKey: ""
  keycloak_rs256_certificate: ""
  keycloak_adminSecret: ""
  keycloak_clientSecret: ""
  keycloak_serviceClientCertificate: ""



# importRealms is used to import realms on startup.
# It will set "--import-realm" as arg to enable realm import on startup.
# This will not recreate existing realms.
importRealms: true

command: []
extraArgs: []
extraVolumes: []
extraVolumeMounts: []

# extraConfig is used to add additional environment variables to the Keycloak container.
extraConfig:
  # The name of the ConfigMap that will be created.
  name: ""
  # If enabled, the ConfigMap will be created with the specified data.
  create: false
  # The data to be added to the ConfigMap.
  data: {}
  # Add additional existing ConfigMaps. These will be active even if enabled is false.
  external: []

# extraSecret is used to add additional secrets to the Keycloak container.
extraSecret:
  # name of the Secret that will be created.
  name: ""
  # create enables the Secret with the specified data and name.
  create: false
  # data is a dict of environment variables to be added to the Secret.
  data: {}
  # external is a list of additional existing Secrets. These will be active even if enabled is false.
  external: []

database:
  url: "jdbc:postgresql://db:5432/keycloak"
  username: "keycloak"
  password: ""

realm:
  name: ""
  filepath: ""

restartPolicy: Always

keycloak:
  hostname: ""
  hostnameBackchannelDynamic: true
  serviceMonitor:
    enabled: true
    path: "/metrics"
    port: "mgmt"
frontendHostname: ""
keycloak2ndHostname: ""

containerSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

resources:
  limits:
    memory: "1Gi"
    cpu: "500m"
  requests:
    memory: "1Gi"
    cpu: "150m"

# should be about 4 times the cpu count
threadPool: 16

startupProbe:
  enabled: true
  httpGet:
    path: "/health/started"
    port: "mgmt"
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 60
  successThreshold: 1

livenessProbe:
  enabled: true
  httpGet:
    path: "/health/live"
    port: "mgmt"
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: "/health/ready"
    port: "mgmt"
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

ingress:
  # Only enable if 2nd host name is defined
  enabled2nd: false
  ingressClassName: nginx
  path: /
  pathType: Prefix
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"

service:
  http:
    enabled: true
  ports:
    http: 80

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60

podDisruptionBudget:
  enabled: false
  minAvailable: "60%"
